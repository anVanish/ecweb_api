paths:
  #auth
  /auth/login:
    post:
      tags:
        - Auth
      summary: Logs user into the system
      description: Only allow user that is registered and verified.
      operationId: login
      requestBody: 
        description: Login Infomation (email, password)
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginBody'
      responses:
        '200':
          description: Logged in
          content:
            application/json:
              schema:        
                properties:
                  success:
                    type: boolean
                    example: true
                  data: 
                    $ref: '#/components/schemas/LoginData'
        '400':
          description: Bad request, MISSING_EMAIL | INVALID_EMAIL | MISSING_PASSWORD | INCORRECT_PASSWORD
        '403':
          description: Forbidden, EMAIL_NOT_VERIFIED | ACCOUNT_PENDING_DELETE
        '404':
          description: Not found, EMAIL_NOT_FOUND
        '500':
          description: Internal server error, SERVER_ERROR
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /auth/register:
    post:
      tags:
        - Auth
      summary: Register and send verified email
      operationId: register
      requestBody: 
        description: Register Infomation
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterBody'
      responses:
        '200':
          description: Register successfully
          content:
            application/json:
              schema:        
                properties:
                  success:
                    type: boolean
                    example: true
        '202': 
          description: Accepted, EMAIL_PENDING_VERIFY
        '400':
          description: Bad request, MISSING_EMAIL | INVALID_EMAIL | MISSING_PASSWORD | PASSWORD_CONFIRM_INCORRECT
        '403':
          description: Forbidden, ACCOUNT_PENDING_DELETE
        '409': 
          description: Conflict, EMAIL_ALREADY_EXISTS
        '500': 
          description: Internal server error, SERVER_ERROR
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error' 
  /auth/register/email:
    post:
      tags:
        - Auth
      summary: Resend verified email for register
      description: Allow users to resend register verified code to their email
      operationId: regiserResendEmail
      requestBody: 
        description: Email registered to system and need to verified
        content:
          application/json:
            schema:
              properties:
                email:
                  type: string
                  example: alltapduel@gmail.com         
      responses:
        '200':
          description: Email sent successfully
          content:
            application/json:
              schema:        
                properties:
                  success:
                    type: boolean
                    example: true
        '400':
          description: Bad request, MISSING_EMAIL | INVALID_EMAIL
        '403':
          description: Forbidden, ACCOUNT_PENDING_DELETE
        '404':
          description: Not found, EMAIL_NOT_FOUND
        '500':
          description: Internal server error, SERVER_ERROR
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /auth/forgot-password:
    post:
      tags:
        - Auth
      summary: Request reset password
      description: System send verified link to user's email
      operationId: forgot-password
      requestBody: 
        description: Email registered to system and need to reset password
        content:
          application/json:
            schema:
              properties:
                email:
                  type: string
                  example: alltapduel@gmail.com         
      responses:
        '200':
          description: Register successfully
          content:
            application/json:
              schema:        
                properties:
                  success:
                    type: boolean
                    example: true
        '400':
          description: Bad request, MISSING_EMAIL | INVALID_EMAIL
        '403':
          description: Forbidden, EMAIL_NOT_VERIFIED | ACCOUNT_PENDING_DELETE
        '404':
          description: Not found, EMAIL_NOT_FOUND
        '500':
          description: Internal server error, SERVER_ERROR
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      tags:
        - Auth
      summary: Reset password
      description: User must verify email to do this operation
      operationId: reset-password
      requestBody: 
        description: New password
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPasswordBody'
      responses:
        '200':
          description: Register successfully
          content:
            application/json:
              schema:        
                properties:
                  success:
                    type: boolean
                    example: true
        '400':
          description: Bad request, MISSING_PASSWORD | PASSWORD_CONFIRM_INCORRECT | MISSING_RESET_CODE | INVALID_RESET_CODE
        '404':
          description: Not found, USER_NOT_FOUND
        '500':
          description: Internal server error, SERVER_ERROR
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /auth/verify/email:
    post:
      tags:
        - Auth
      summary: Verify email for user after registerd
      operationId: verifyEmail
      requestBody: 
        description: Code sent via mail
        content:
          application/json:
            schema:
              properties:
                code:
                  type: string
                  example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJkYXRhIjp7Il9pZCI6IjY1MzBmYjI3ZWU5OGJhNjJmNzcyOGQ3MSJ9LCJpYXQiOjE2OTc3MDg4NDAsImV4cCI6MTY5Nzc5NTI0MH0.XAm4oKOhcbspT521e5vy8HNjKH5rvMxB7dXtjs6ZwXo
      responses:
        '200':
          description: Email verified
          content:
            application/json:
              schema:        
                properties:
                  success:
                    type: boolean
                    example: true
        '400':
          description: Bad request, MISSING_VERIFY_CODE | INVALID_CODE
        '403':
          description: Forbidden, ACCOUNT_PENDING_DELETE
        '404':
          description: Not found, USER_NOT_FOUND
        '500':
          description: Internal server error, SERVER_ERROR
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  #users
  /users:
    get:
      tags:
        - Users
      summary: Find all users (admin)
      description: Allow admin view list of all users in system.
      operationId: findUsers
      parameters:
        - name: limit
          in: query
          description: The page size for pagination
          required: false
          explode: true
          schema:
            type: number
        - name: page
          in: query
          description: The page number for pagination
          required: false
          explode: true
          schema:
            type: number
        - name: all
          in: query
          description: The flag to get all users (include deleted users)
          required: false
          explode: true
          schema:
            type: boolean
            enum:
              - true
        - name: deleted
          in: query
          description: The flag to get only deleted users
          required: false
          explode: true
          schema:
            type: boolean
            enum:
              - true
        - name: pending
          in: query
          description: The flag to get only pending deleted users (deleted within 24hs)
          required: false
          explode: true
          schema:
            type: boolean
            enum:
              - true
        - name: search
          in: query
          description: Allows the client to specify a search string for filtering users based on name or email.
          required: false
          explode: true
          schema:
            type: string
      security: 
        - BearerAuth: []
      responses:
        '200':
          description: Find users successfully
          content:
            application/json:
              schema:        
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      total:
                        type: number
                        example: 20
                      length:
                        type: number
                        example: 10
                      users:
                        type: array
                        items:
                          $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized, UNAUTHORIZED
        '500':
          description: Internal server error, SERVER_ERROR
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - Users
      summary: Add new user (admin)
      description: Allow admin to add new user into system
      operationId: addUsers
      requestBody: 
        description: Users infomaiton
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddUser'
      security:
        - BearerAuth: []
      responses:
        '200':
          description: User added
          content:
            application/json:
              schema:        
                properties:
                  success:
                    type: boolean
                    example: true
        '400':
          description: Bad request, MISSING_EMAIL | MISSING_EMAIL | MISSING_PASSWORD | PASSWORD_CONFIRM_INCORRECT | INVALID_NAME | INVALID_PHONE | INVALID_GENDER | INVALID_BIRTHDAY
        '401': 
          description: Unauthorized, UNAUTHORIZED
        '409':
          description: Conflict, EMAIL_ALREADY_EXISTS
        '500':
          description: Internal server error, SERVER_ERROR
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users/{userId}:
    get:
      tags:
        - Users
      summary: Find users by id (admin)
      description: Allow admin user by using id.
      operationId: findUsersById
      parameters:
        - name: userId
          in: path
          description: Id of users
          required: true
          explode: true
          example: 6530fb27ee98ba62f7728d71
          schema:
            type: string
            format: ObjectID
      security: 
        - BearerAuth: []
      responses:
        '200':
          description: Find users successfully
          content:
            application/json:
              schema:        
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/User'
        '404':
          description: Not found, USER_NOT_FOUND
        '401': 
          description: Unauthorized, UNAUTHORIZED
        '500':
          description: Internal server error, SERVER_ERROR
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'    
    patch:
      tags:
        - Users
      summary: Update user by id (admin)
      description: Allow admin to update user by id
      operationId: updateUsers
      parameters:
        - name: userId
          type: string
          required: true
          explode: true
          description: Id of user
          in: path
          example: 6530fb27ee98ba62f7728d71
          schema:
            type: string
            format: ObjectID
      requestBody: 
        description: Users infomaiton
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Profile'
      security:
        - BearerAuth: []
      responses:
        '200':
          description: User updated
          content:
            application/json:
              schema:        
                properties:
                  success:
                    type: boolean
                    example: true
        '400':
          description: Bad request, MISSING_ID | INVALID_NAME | INVALID_PHONE | INVALID_GENDER | INVALID_BIRTHDAY
        '404':
          description: Not found, USER_NOT_FOUND
        '500':
          description: Internal server error, SERVER_ERROR
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - Users
      summary: Delete user by id (able to restore) (admin)
      description: Allow admin to delete user by id
      operationId: deleteUsers
      parameters:
        - name: userId
          type: string
          required: true
          explode: true
          description: Id of user
          in: path
          example: 6530fb27ee98ba62f7728d71
          schema:
            type: string
            format: ObjectID
      security:
        - BearerAuth: []
      responses:
        '200':
          description: User deleted
          content:
            application/json:
              schema:        
                properties:
                  success:
                    type: boolean
                    example: true
        '404':
          description: Not found, USER_NOT_FOUND
        '401': 
          description: Unauthorized, UNAUTHORIZED
        '500':
          description: Internal server error, SERVER_ERROR
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users/{userId}/force:
     delete:
      tags:
        - Users
      summary: Delete user by id (force - unable to restore) (admin)
      description: Allow admin to delete user by id
      operationId: forceDeleteUsers
      parameters:
        - name: userId
          type: string
          required: true
          explode: true
          description: Id of user
          in: path
          example: 6530fb27ee98ba62f7728d71
          schema:
            type: string
            format: ObjectID
      security:
        - BearerAuth: []
      responses:
        '200':
          description: User deleted
          content:
            application/json:
              schema:        
                properties:
                  success:
                    type: boolean
                    example: true
        '404':
          description: Not found, USER_NOT_FOUND
        '401': 
          description: Unauthorized, UNAUTHORIZED
        '500':
          description: Internal server error, SERVER_ERROR
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users/{userId}/restore:
    patch:
      tags:
        - Users
      summary: Restore deleted users (admin)
      description: Allow admin to restore deleted users by userId
      operationId: restoreUser
      parameters:
        - name: userId
          type: string
          required: true
          explode: true
          description: Id of user
          in: path
          example: 6530fb27ee98ba62f7728d71
          schema:
            type: string
            format: ObjectID
      security:
        - BearerAuth: []
      responses:
        '200':
          description: User restored
          content:
            application/json:
              schema:
                properties:
                  success:
                    type: boolean
                    example: true
        '404':
          description: Not found, USER_NOT_FOUND
        '500':
          description: Internal server error, SERVER_ERROR
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error' 

  #profile
  /users/me:
    get:
      tags:
        - Profile
      summary: Find my profile (user)
      description: Authenticated user find their profile
      operationId: findMe
      security: 
        - BearerAuth: []
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:        
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized, UNAUTHORIZED
        '403':
          description: Forbidden, ACCOUNT_PENDING_DELETE
        '500':
          description: Internal server error, SERVER_ERROR
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      tags:
        - Profile
      summary: Update profile (user)
      description: Authenticated user update their profile
      operationId: updateProfile 
      requestBody: 
        description: Users infomaiton
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Profile'
      security:
        - BearerAuth: []
      responses:
        '200':
          description: User updated
          content:
            application/json:
              schema:        
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      user: 
                        $ref: '#/components/schemas/Profile'
        '400':
          description: Bad request, USER_NOT_FOUND | INVALID_NAME | INVALID_PHONE | INVALID_GENDER | INVALID_BIRTHDAY
        '401':
          description: Unauthorized, UNAUTHORIZED
        '403':
          description: Forbidden, ACCOUNT_PENDING_DELETE
        '404':
          description: Not found, USER_NOT_FOUND
        '500':
          description: Internal server error, SERVER_ERROR
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    delete:
      tags:
        - Profile
      summary: Delete account (restore within 24h) (user)
      description: Authenticated user delete their account
      operationId: deleteAccount
      security:
        - BearerAuth: []
      responses:
        '200':
          description: User deleted
          content:
            application/json:
              schema:        
                properties:
                  success:
                    type: boolean
                    example: true
        '401':
          description: Unauthorized, UNAUTHORIZED
        '404':
          description: Bad request, USER_NOT_FOUND
        '500':
          description: Internal server error, SERVER_ERROR
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error' 
  /users/me/restore:
    patch:
      tags:
        - Profile
      summary: Restore account (user)
      description: Authenticated user restore their account if they are deleted within 24h
      operationId: restoreAccount 
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Account restored
          content:
            application/json:
              schema:        
                properties:
                  success:
                    type: boolean
                    example: true
        '401':
          description: Unauthorized, UNAUTHORIZED
        '404':
          description: Not found, USER_NOT_FOUND
        '500':
          description: Internal server error, SERVER_ERROR
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      
  #addresses
  /users/{userId}/addresses:
    get:
      tags:
        - Addresses
      summary: Get all addresses of user (admin)
      description: Allow admin to get all addresses of the user by user id
      operationId: getAddresses
      parameters:
        - name: userId
          type: string
          required: true
          explode: true
          description: Id of user
          in: path
          example: 6530fb27ee98ba62f7728d71
          schema:
            type: string
            format: ObjectID  
      security:
        - BearerAuth: []
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:        
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      addresses:
                        type: array
                        items:
                          $ref: '#/components/schemas/Addresses'
        '401':
          description: Unauthorized, UNAUTHORIZED
        '404':
          description: Not found, USER_NOT_FOUND
        '500':
          description: Internal server error, SERVER_ERROR
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - Addresses
      summary: Add address (admin)
      description: Allow admin to add new address for user by user id
      operationId: addAddresses
      parameters:
        - name: userId
          type: string
          required: true
          explode: true
          description: Id of user
          in: path
          example: 6530fb27ee98ba62f7728d71
          schema:
            type: string
            format: ObjectID  
      requestBody:
        description: All fields are required to add new address
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddAddresses'
      security:
        - BearerAuth: []
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:        
                properties:
                  success:
                    type: boolean
                    example: true
        '401':
          description: Unauthorized, UNAUTHORIZED
        '400':
          description: Bad request, INVALID_NAME | INVALID_PHONE | INVALID_ADDRESS
        '404':
          description: Not found, USER_NOT_FOUND
        '500':
          description: Internal server error, SERVER_ERROR
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /addresses/{addressId}/{userId}:
    get:
      tags:
        - Addresses
      summary: Get address (admin)
      description: Allow admin to get address by user id and addressesId
      operationId: getAddress
      parameters:
        - name: addressId
          type: string
          required: true
          explode: true
          description: Id of address
          in: path
          example: 6538c4c1cc978c2ebaba4ef5
          schema:
            type: string
            format: ObjectID
        - name: userId
          type: string
          required: true
          explode: true
          description: Id of user
          in: path
          example: 6530fb27ee98ba62f7728d71
          schema:
            type: string
            format: ObjectID  
      security:
        - BearerAuth: []
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:        
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      address:
                        $ref: '#/components/schemas/Addresses'  
        '401':
          description: Unauthorized, UNAUTHORIZED
        '404':
          description: Not found, USER_NOT_FOUND | ADDRESS_NOT_FOUND
        '500':
          description: Internal server error, SERVER_ERROR
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - Addresses
      summary: Update address (admin)
      description: Allow admin to update address by user id and addressesId
      operationId: updateAddress
      parameters:
        - name: addressId
          type: string
          required: true
          explode: true
          description: Id of address
          in: path
          example: 6538c4c1cc978c2ebaba4ef5
          schema:
            type: string
            format: ObjectID
        - name: userId
          type: string
          required: true
          explode: true
          description: Id of user
          in: path
          example: 6530fb27ee98ba62f7728d71
          schema:
            type: string
            format: ObjectID
      requestBody:
        description: Update fields
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddAddresses'
        
      security:
        - BearerAuth: []
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:        
                properties:
                  success:
                    type: boolean
                    example: true
        '401':
          description: Unauthorized, UNAUTHORIZED
        '400':
          description: Bad request, INVALID_ADDRESS | INVALID_NAME | INVALID_PHONE
        '404':
          description: Not found, USER_NOT_FOUND | ADDRESS_NOT_FOUND
        '500':
          description: Internal server error, SERVER_ERROR
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - Addresses
      summary: Delete address (admin)
      description: Allow admin to delete address by user id and addressesId
      operationId: deleteAddress
      parameters:
        - name: addressId
          type: string
          required: true
          explode: true
          description: Id of address
          in: path
          example: 6538c4e2cc978c2ebaba4efb
          schema:
            type: string
            format: ObjectID
        - name: userId
          type: string
          required: true
          explode: true
          description: Id of user
          in: path
          example: 6530fb27ee98ba62f7728d71
          schema:
            type: string
            format: ObjectID  
      security:
        - BearerAuth: []
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:        
                properties:
                  success:
                    type: boolean
                    example: true
        '401':
          description: Unauthorized, UNAUTHORIZED
        '404':
          description: Not found, USER_NOT_FOUND | ADDRESS_NOT_FOUND
        '500':
          description: Internal server error, SERVER_ERROR
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /users/me/addresses:
    get:
      tags:
        - Addresses
      summary: Get my addresses (user)
      description: Authenticated user get all addresses 
      operationId: getMyAddresses
      security:
        - BearerAuth: []
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:        
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      addresses:
                        type: array
                        items:
                          $ref: '#/components/schemas/Addresses'
        '401':
          description: Unauthorized, UNAUTHORIZED
        '404':
          description: Not found, USER_NOT_FOUND
        '500':
          description: Internal server error, SERVER_ERROR
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - Addresses
      summary: Add address (user)
      description: Authenticated user add new address
      operationId: addMyAddress
      requestBody:
        description: All fields are required to add new address
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddAddresses'
      security:
        - BearerAuth: []
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:        
                properties:
                  success:
                    type: boolean
                    example: true
        '401':
          description: Unauthorized, UNAUTHORIZED
        '400':
          description: Bad request, INVALID_NAME | INVALID_PHONE | INVALID_ADDRESS
        '404':
          description: Not found, USER_NOT_FOUND
        '500':
          description: Internal server error, SERVER_ERROR
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /addresses/{addressId}/me:
    get:
      tags:
        - Addresses
      summary: Get address (user)
      description: Authenticated user get address by addressesId
      operationId: getMyAddress
      parameters:
        - name: addressId
          type: string
          required: true
          explode: true
          description: Id of address
          in: path
          example: 6538c4c1cc978c2ebaba4ef5
          schema:
            type: string
            format: ObjectID
      security:
        - BearerAuth: []
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:        
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      address:
                        $ref: '#/components/schemas/Addresses'  
        '401':
          description: Unauthorized, UNAUTHORIZED
        '404':
          description: Not found, USER_NOT_FOUND | ADDRESS_NOT_FOUND
        '500':
          description: Internal server error, SERVER_ERROR
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - Addresses
      summary: Update address (user)
      description: Authenticated user update address by addressesId
      operationId: updateMyAddress
      parameters:
        - name: addressId
          type: string
          required: true
          explode: true
          description: Id of address
          in: path
          example: 6538c4c1cc978c2ebaba4ef5
          schema:
            type: string
            format: ObjectID
      requestBody:
        description: Update fields
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddAddresses'
      security:
        - BearerAuth: []
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:        
                properties:
                  success:
                    type: boolean
                    example: true
        '401':
          description: Unauthorized, UNAUTHORIZED
        '400':
          description: Bad request, INVALID_ADDRESS | INVALID_NAME | INVALID_PHONE
        '404':
          description: Not found, USER_NOT_FOUND | ADDRESS_NOT_FOUND
        '500':
          description: Internal server error, SERVER_ERROR
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - Addresses
      summary: Delete address (user)
      description: Authenticated user delete address by addressesId
      operationId: deleteMyAddress
      parameters:
        - name: addressId
          type: string
          required: true
          explode: true
          description: Id of address
          in: path
          example: 6538c4e2cc978c2ebaba4efb
          schema:
            type: string
            format: ObjectID  
      security:
        - BearerAuth: []
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:        
                properties:
                  success:
                    type: boolean
                    example: true
        '401':
          description: Unauthorized, UNAUTHORIZED
        '404':
          description: Not found, USER_NOT_FOUND | ADDRESS_NOT_FOUND
        '500':
          description: Internal server error, SERVER_ERROR
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  #shops
  /shops:
    get:
      tags:
        - Shops
      summary: Get list of shop (admin)
      description: Allow admin to get list shops
      operationId: getShops
      security:
        - BearerAuth: []
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:        
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      shops:
                        type: array
                        items:
                          $ref: '#/components/schemas/Shop'  
        '500':
          description: Internal server error, SERVER_ERROR
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'   
  /shops/{userId}:
    post: 
      tags:
        - Shops
      summary: Add shop for user (admin)
      description: Allow admin to add shop for user by userId
      operationId: addShop
      parameters:
        - name: userId
          type: string
          required: true
          explode: true
          description: Id of user need to add shop
          in: path
          example: 65393c347287bc3e74eead08
          schema:
            type: string
            format: ObjectID
      requestBody:
        description: All fields need to be added
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddShop'
      security:
        - BearerAuth: []
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:        
                properties:
                  success:
                    type: boolean
                    example: true
        '400':  
          description: Bad request, INVALID_ADDRESS
        '404':
          description: Not found, USER_NOT_FOUND
        '500':
          description: Internal server error, SERVER_ERROR
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /shops/{shopId}:
    get:
      tags:
        - Shops
      summary: Get shop info
      description: Allow to get shop info by shopId
      operationId: getShop
      parameters:
        - name: shopId
          type: string
          required: true
          explode: true
          description: Id of shop
          in: path
          example: 65393c347287bc3e74eead08
          schema:
            type: string
            format: ObjectID
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:        
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      shop:
                        $ref: '#/components/schemas/Shop'  
        '404':
          description: Not found, SHOP_NOT_FOUND
        '500':
          description: Internal server error, SERVER_ERROR
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch: 
      tags:
        - Shops
      summary: Update shop info (admin)
      description: Allow admin to update shop info by shopId
      operationId: updateShop
      parameters:
        - name: shopId
          type: string
          required: true
          explode: true
          description: Id of shop
          in: path
          example: 65393c347287bc3e74eead08
          schema:
            type: string
            format: ObjectID
      requestBody:
        description: All fields can be updated
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateShop'
      security:
        - BearerAuth: []
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:        
                properties:
                  success:
                    type: boolean
                    example: true
        '400':  
          description: Bad request, INVALID_ADDRESS
        '404':
          description: Not found, SHOP_NOT_FOUND
        '500':
          description: Internal server error, SERVER_ERROR
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete: 
      tags:
        - Shops
      summary: Delete shop (admin)
      description: Allow admin to delete shop by shopId
      operationId: deleteShop
      parameters:
        - name: shopId
          type: string
          required: true
          explode: true
          description: Id of shop
          in: path
          example: 65394341db39b5fd654738ba
          schema:
            type: string
            format: ObjectID
      security:
        - BearerAuth: []
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:        
                properties:
                  success:
                    type: boolean
                    example: true
        '404':
          description: Not found, SHOP_NOT_FOUND
        '500':
          description: Internal server error, SERVER_ERROR
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /shops/me:
    get:
      tags:
        - Shops
      summary: Get my shop (seller)
      description: Authenticated user get their shop's info
      operationId: getMyShop
      security:
        - BearerAuth: []
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:        
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      shop:
                        $ref: '#/components/schemas/Shop'  
        '404':
          description: Not found, SHOP_NOT_FOUND
        '500':
          description: Internal server error, SERVER_ERROR
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'   
    post: 
      tags:
        - Shops
      summary: Register to be a seller (seller)
      description: Authenticated user register to be a seller
      operationId: addMyShop
      requestBody:
        description: All fields need to be added
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateShop'
      security:
        - BearerAuth: []
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:        
                properties:
                  success:
                    type: boolean
                    example: true
        '400':  
          description: Bad request, INVALID_ADDRESS
        '404':
          description: Not found, USER_NOT_FOUND
        '500':
          description: Internal server error, SERVER_ERROR
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch: 
      tags:
        - Shops
      summary: Update shop info (seller)
      description: Authenticated user update their shop
      operationId: updateMyShop
      requestBody:
        description: All fields can be updated
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateShop'
      security:
        - BearerAuth: []
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:        
                properties:
                  success:
                    type: boolean
                    example: true
        '400':  
          description: Bad request, INVALID_ADDRESS
        '404':
          description: Not found, SHOP_NOT_FOUND
        '500':
          description: Internal server error, SERVER_ERROR
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete: 
      tags:
        - Shops
      summary: Delete shop (seller)
      description: Authenticated user delete their shop
      operationId: deleteMyShop
      security:
        - BearerAuth: []
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:        
                properties:
                  success:
                    type: boolean
                    example: true
        '404':
          description: Not found, SHOP_NOT_FOUND
        '500':  
          description: Internal server error, SERVER_ERROR
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /categories:
    get:
      tags:
        - Categories
      summary: Get all categories
      description: Get list of all categories
      operationId: getCategories
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:        
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      categories:
                        type: array
                        items:
                          $ref: '#/components/schemas/Categories'
        '500':
          description: Internal server error, SERVER_ERROR
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'   
    post:
      tags:
        - Categories
      summary: Add category (admin)
      description: Add new category
      operationId: addCategory
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddCategories'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:        
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      category:
                        $ref: '#/components/schemas/Categories'
        '400':
          description: Bad reequest, MISSING_CATEGORY_NAME | MISSING_CATEGORY_IMAGE
        '404':
          description: Not found, CATEGORY_NOT_FOUND
        '500':
          description: Internal server error, SERVER_ERROR
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'   
  /categories/{categoryId}:
    get:
      tags:
        - Categories
      summary: Get category detail (admin)
      description: Get info of category by categoryId
      operationId: getCategory
      parameters:
        - name: categoryId
          type: string
          required: true
          explode: true
          description: Id of category
          in: path
          example: 653b417da4622bd29d455f9d
          schema:
            type: string
            format: ObjectID

      security:
        - BearerAuth: []
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:        
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      category:
                        $ref: '#/components/schemas/Categories'
        '500':
          description: Internal server error, SERVER_ERROR
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'   
    put:
      tags:
        - Categories
      summary: Update category (admin)
      description: Update category by categoryId
      parameters:
        - name: categoryId
          type: string
          required: true
          explode: true
          description: Id of category
          in: path
          example: 653b417da4622bd29d455f9d
          schema:
            type: string
            format: ObjectID
      operationId: updateCategory
      security:
        - BearerAuth: []
      requestBody:
        description: Can update all items in subCategories by providing all object with name (not included in requestBody will be deleted)
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddCategories'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:        
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      category:
                        $ref: '#/components/schemas/Categories'
        '400':
          description: Bad reequest, MISSING_CATEGORY_NAME | MISSING_CATEGORY_IMAGE
        '404':
          description: Not found, CATEGORY_NOT_FOUND
        '500':
          description: Internal server error, SERVER_ERROR
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'   
    delete:
      tags:
        - Categories
      summary: Delete category (admin)
      description: Delete category by categoryId
      parameters:
        - name: categoryId
          type: string
          required: true
          explode: true
          description: Id of category
          in: path
          example: 653b417da4622bd29d455f9d
          schema:
            type: string
            format: ObjectID
      operationId: updateCategory
      security:
        - BearerAuth: []
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:        
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      category:
                        $ref: '#/components/schemas/Categories'
        '404':
          description: Not found, CATEGORY_NOT_FOUND
        '500':
          description: Internal server error, SERVER_ERROR
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'   
    
  /products:
    get:
      tags:
        - Products
      summary: Get list of all products
      description: Allow to get list of all products
      operationId: getProducts
      parameters:
        - name: limit
          in: query
          description: The page size for pagination
          required: false
          explode: true
          schema:
            type: number
        - name: page
          in: query
          description: The page number for pagination
          required: false
          explode: true
          schema:
            type: number
        - name: all
          in: query
          description: The flag to get all products (include deleted products)
          required: false
          explode: true
          schema:
            type: boolean
            enum:
              - true
        - name: deleted
          in: query
          description: The flag to get only deleted products
          required: false
          explode: true
          schema:
            type: boolean
            enum:
              - true
        - name: sortBy
          in: query
          description: Sort result by popularity, time, sales, price, use for sorting
          required: false
          explode: true
          schema:
            type: string
            enum: 
              - pops
              - time
              - sales
              - price
        - name: order
          in: query
          description: Sort product ascending or descending, use for sorting
          required: false
          explode: true
          schema:
            type: string
            enum:
              - asc
              - desc
        - name: search
          in: query
          description: Allows the client to specify a search string for filtering products based on name
          required: false
          explode: true
          schema:
            type: string
        - name: category
          in: query
          description: The category slug, use for filtering
          required: false
          explode: true
          schema:
            type: string
        - name: subCategories
          in: query
          description: The list of subcategories slug, use for filtering
          required: false
          explode: true
          schema:
            type: string
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:        
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      products:
                        type: array
                        items:
                          $ref: '#/components/schemas/Products'  
        '500':
          description: Internal server error, SERVER_ERROR
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'   
  /shops/{shopId}/products:
    get:
      tags:
        - Products
      summary: Get list of all products of specific shop
      description: Allow to get list of all products by shopId
      operationId: getShopProducts
      parameters:
        - name: shopId
          type: string
          required: true
          explode: true
          description: Id of shop
          in: path
          example: 65393c347287bc3e74eead08
          schema:
            type: string
            format: ObjectID
        - name: limit
          in: query
          description: The page size for pagination
          required: false
          explode: true
          schema:
            type: number
        - name: page
          in: query
          description: The page number for pagination
          required: false
          explode: true
          schema:
            type: number
        - name: all
          in: query
          description: The flag to get all products (include deleted products)
          required: false
          explode: true
          schema:
            type: boolean
            enum:
              - true
        - name: deleted
          in: query
          description: The flag to get only deleted products
          required: false
          explode: true
          schema:
            type: boolean
            enum:
              - true
        - name: search
          in: query
          description: Allows the client to specify a search string for filtering products based on name
          required: false
          explode: true
          schema:
            type: string
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:        
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      products:
                        type: array
                        items:
                          $ref: '#/components/schemas/Products'  
        '404':
          description: Not found, SHOP_NOT_FOUND
        '500':
          description: Internal server error, SERVER_ERROR
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'   
  /products/{shopId}:
    post:
      tags:
        - Products
      summary: Add new product to shop (admin)
      description: Allow admin to add new product to shop by shopId
      operationId: addProduct
      parameters:
        - name: shopId
          type: string
          required: true
          explode: true
          description: Id of shop
          in: path
          example: 65393c347287bc3e74eead08
          schema:
            type: string
            format: ObjectID
      requestBody:
        description: Field shopId, name, images, category, categoryId, subCategoryId, variations, weight, packageSize is required
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddProducts'
      security:
        - BearerAuth: []
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:        
                properties:
                  success:
                    type: boolean
                    example: true
        '400':
          description: Bad request, MISSING_PRODUCT_NAME | MISSING_PRODUCT_IMAGE | INVALID_PRODUCT_CATEGORY | MISSING_PRODUCT_VARIATION_NAME | INVALID_PRODUCT_VARIATION_PRICE | INVALID_PRODUCT_VARIATION_STOCK | INVALID_PRODUCT_WEIGHT | INVALID_PRODUCT_WIDTH | INVALID_PRODUCT_LENGTH | INVALID_PRODUCT_HEIGHT
        '404':
          description: Not found, SHOP_NOT_FOUND
        '500':
          description: Internal server error, SERVER_ERROR
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'   
  /products/{slug}:
    get:
      tags:
        - Products
      summary: Get detail of products
      description: Allow to get detail of product by productId
      operationId: getProduct
      parameters:
        - name: slug
          type: string
          required: true
          explode: true
          description: Slug of product
          in: path
          example: iphone-13-promax-653e8afe3f5ccd100db50be7
          schema:
            type: string
            format: ObjectID
        - name: all
          in: query
          description: The flag to get products (include deleted or not)
          required: false
          explode: true
          schema:
            type: boolean
            enum:
              - true
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:        
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    properties:
                      product:
                        $ref: '#/components/schemas/Products'  
        '404':
          description: Not found, PRODUCT_NOT_FOUND
        '500':
          description: Internal server error, SERVER_ERROR
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'   
  /products/{productId}:  
    put:
      tags:
        - Products
      summary: Update product (admin)
      description: Allow admin to update product by product Id
      operationId: updateProduct
      parameters:
        - name: productId
          type: string
          required: true
          explode: true
          description: Id of product
          in: path
          example: 653e8afe3f5ccd100db50be7
          schema:
            type: string
            format: ObjectID
      requestBody:
        description: Field shopId, name, images, category, categoryId, subCategoryId, variations, weight, packageSize is required
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddProducts'
      security:
        - BearerAuth: []
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:        
                properties:
                  success:
                    type: boolean
                    example: true
        '400':
          description: Bad request, MISSING_PRODUCT_NAME | MISSING_PRODUCT_IMAGE | INVALID_PRODUCT_CATEGORY | MISSING_PRODUCT_VARIATION_NAME | INVALID_PRODUCT_VARIATION_PRICE | INVALID_PRODUCT_VARIATION_STOCK | INVALID_PRODUCT_WEIGHT | INVALID_PRODUCT_WIDTH | INVALID_PRODUCT_LENGTH | INVALID_PRODUCT_HEIGHT
        '404':
          description: Not found, PRODUCT_NOT_FOUND
        '500':
          description: Internal server error, SERVER_ERROR
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'   
    delete:
      tags:
        - Products
      summary: Delete product (able to restore) (admin)
      description: Allow admin to delete product by productId
      operationId: deleteProduct
      parameters:
        - name: productId
          type: string
          required: true
          explode: true
          description: Id of product
          in: path
          example: 653e8b893f5ccd100db50c02
          schema:
            type: string
            format: ObjectID
      security:
        - BearerAuth: []
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:        
                properties:
                  success:
                    type: boolean
                    example: true
        '404':
          description: Not found, PRODUCT_NOT_FOUND
        '500':
          description: Internal server error, SERVER_ERROR
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'   
  /products/{productId}/restore:
    patch:
      tags:
        - Products
      summary: Restore deleted product (admin)
      description: Allow admin to restore deleted product by productId
      operationId: restoreProduct
      parameters:
        - name: productId
          type: string
          required: true
          explode: true
          description: Id of product
          in: path
          example: 653e8b893f5ccd100db50c02
          schema:
            type: string
            format: ObjectID
      security:
        - BearerAuth: []
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:        
                properties:
                  success:
                    type: boolean
                    example: true
        '404':
          description: Not found, PRODUCT_NOT_FOUND
        '500':
          description: Internal server error, SERVER_ERROR
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'   
  /products/{productId}/force:
    delete:
      tags:
        - Products
      summary: Force delete product (unable to restore) (admin)
      description: Allow admin to force delete product to shop by productId
      operationId: forceDeleteProduct
      parameters:
        - name: productId
          type: string
          required: true
          explode: true
          description: Id of product
          in: path
          example: 653d6e41e0d271bb861bbab3
          schema:
            type: string
            format: ObjectID
      security:
        - BearerAuth: []
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:        
                properties:
                  success:
                    type: boolean
                    example: true
        '404':
          description: Not found, PRODUCT_NOT_FOUND
        '500':
          description: Internal server error, SERVER_ERROR
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'   
  # seller product
  /shops/me/products:
    get:
      tags:
        - Products
      summary: Get list of all products of my shop (seller)
      description: Allow seller to get list of all products of their shop
      operationId: getMyProducts
      parameters:
        - name: limit
          in: query
          description: The page size for pagination
          required: false
          explode: true
          schema:
            type: number
        - name: page
          in: query
          description: The page number for pagination
          required: false
          explode: true
          schema:
            type: number
        - name: all
          in: query
          description: The flag to get all products (include deleted products)
          required: false
          explode: true
          schema:
            type: boolean
            enum:
              - true
        - name: deleted
          in: query
          description: The flag to get only deleted products
          required: false
          explode: true
          schema:
            type: boolean
            enum:
              - true
        - name: search
          in: query
          description: Allows the client to specify a search string for filtering products based on name
          required: false
          explode: true
          schema:
            type: string
      security:
        - BearerAuth: []
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:        
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      products:
                        type: array
                        items:
                          $ref: '#/components/schemas/Products'  
        '404':
          description: Not found, SHOP_NOT_FOUND
        '500':
          description: Internal server error, SERVER_ERROR
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'   
  /products/me:  
    post:
      tags:
        - Products
      summary: Add product to my shop (seller)
      description: Allow seller to add new product to shop
      operationId: addMyProduct
      requestBody:
        description: Field name, images, category, categoryId, subCategoryId, variations, weight, packageSize is required
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProducts'
      security:
        - BearerAuth: []
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:        
                properties:
                  success:
                    type: boolean
                    example: true
        '400':
          description: Bad request, MISSING_PRODUCT_NAME | MISSING_PRODUCT_IMAGE | INVALID_PRODUCT_CATEGORY | MISSING_PRODUCT_VARIATION_NAME | INVALID_PRODUCT_VARIATION_PRICE | INVALID_PRODUCT_VARIATION_STOCK | INVALID_PRODUCT_WEIGHT | INVALID_PRODUCT_WIDTH | INVALID_PRODUCT_LENGTH | INVALID_PRODUCT_HEIGHT
        '404':
          description: Not found, SHOP_NOT_FOUND
        '500':
          description: Internal server error, SERVER_ERROR
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'   
  /products/{productId}/me:
    put:
      tags:
        - Products
      summary: Update my product (seller)
      description: Allow seller to update their product
      operationId: updateMyProduct
      parameters:
        - name: productId
          type: string
          required: true
          explode: true
          description: Id of product
          in: path
          example: 653e8b893f5ccd100db50c02
          schema:
            type: string
            format: ObjectID
      requestBody:
        description: Field name, images, category, categoryId, subCategoryId, variations, weight, packageSize is required
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProducts'
      security:
        - BearerAuth: []
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:        
                properties:
                  success:
                    type: boolean
                    example: true
        '400':
          description: Bad request, MISSING_PRODUCT_NAME | MISSING_PRODUCT_IMAGE | INVALID_PRODUCT_CATEGORY | MISSING_PRODUCT_VARIATION_NAME | INVALID_PRODUCT_VARIATION_PRICE | INVALID_PRODUCT_VARIATION_STOCK | INVALID_PRODUCT_WEIGHT | INVALID_PRODUCT_WIDTH | INVALID_PRODUCT_LENGTH | INVALID_PRODUCT_HEIGHT
        '404':
          description: Not found, PRODUCT_NOT_FOUND | SHOP_NOT_FOUND
        '500':
          description: Internal server error, SERVER_ERROR
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'   
    delete:
      tags:
        - Products
      summary: Delete product (able to restore) (seller)
      description: Allow seller to delete product by productId
      operationId: deleteMyProduct
      parameters:
        - name: productId
          type: string
          required: true
          explode: true
          description: Id of product
          in: path
          example: 653e8b893f5ccd100db50c02
          schema:
            type: string
            format: ObjectID
      security:
        - BearerAuth: []
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:        
                properties:
                  success:
                    type: boolean
                    example: true
        '404':
          description: Not found, PRODUCT_NOT_FOUND | SHOP_NOT_FOUND
        '500':
          description: Internal server error, SERVER_ERROR
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'   
  /products/{productId}/me/restore:
    patch:
      tags:
        - Products
      summary: Restore deleted product (seller)
      description: Allow seller to restore deleted product by productId
      operationId: restoreMyProduct
      parameters:
        - name: productId
          type: string
          required: true
          explode: true
          description: Id of product
          in: path
          example: 653e8b893f5ccd100db50c02
          schema:
            type: string
            format: ObjectID
      security:
        - BearerAuth: []
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:        
                properties:
                  success:
                    type: boolean
                    example: true
        '404':
          description: Not found, PRODUCT_NOT_FOUND | SHOP_NOT_FOUND
        '500':
          description: Internal server error, SERVER_ERROR
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'   
  /products/{productId}/me/force:
    delete:
      tags:
        - Products
      summary: Force delete product (unable to restore) (seller)
      description: Allow seller to force delete product by productId
      operationId: forceDeleteMyProduct
      parameters:
        - name: productId
          type: string
          required: true
          explode: true
          description: Id of product
          in: path
          example: 653d6e41e0d271bb861bbab3
          schema:
            type: string
            format: ObjectID
      security:
        - BearerAuth: []
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:        
                properties:
                  success:
                    type: boolean
                    example: true
        '404':
          description: Not found, PRODUCT_NOT_FOUND | SHOP_NOT_FOUND
        '500':
          description: Internal server error, SERVER_ERROR
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'   
  
  #cart
  /carts:
    get:
      tags:
        - Carts
      summary: Get carts (user)
      description: Allow user to get list of cart items in their carts, group by product's shop
      operationId: getCarts
      security:
        - BearerAuth: []
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:        
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      total:
                        type: number
                        example: 1
                      carts:
                        type: array
                        items:
                          $ref: '#/components/schemas/ResultCarts'  
        '500':
          description: Internal server error, SERVER_ERROR
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'   
    post:
      tags:
        - Carts
      summary: Add to carts (user)
      description: Allow user to product to their carts
      operationId: addCarts
      security:
        - BearerAuth: []
      requestBody:
        description: productId is _id of product need to add, variationId is product.variations._id (variation for that product)
        content:
          application/json:
            schema:
              properties:
                productId:
                  type: string
                  format: ObjectID
                  example: '653e8a9e14512ee30a5c0137'
                variationId:
                  type: string
                  format: ObjectID
                  example: '653e8a9e14512ee30a5c0139'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:        
                properties:
                  success:
                    type: boolean
                    example: true
        '400': 
          description: Bad request, INVALID_CART_PRODUCT_ID | INVALID_CART_VARIATION_ID
        '404':
          description: Not found, VARIATION_NOT_FOUND | PRODUCT_NOT_FOUND  
        '500':
          description: Internal server error, SERVER_ERROR
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'   
  /carts/{cartId}/variation:
    patch:
      tags:
        - Carts
      summary: Update product's variation in carts (user)
      description: Allow user update variation of product in their carts
      operationId: updateVariationCarts
      parameters:
        - name: cartId
          type: string
          required: true
          explode: true
          description: Id of cart
          in: path
          example: '654688a5b231010272ee9b80'
          schema:
            type: string
            format: ObjectID
      security:
        - BearerAuth: []
      requestBody:
        description: variationId of the product
        content:
          application/json:
            schema:
              properties:
                variationId:
                  type: string
                  format: ObjectID
                  example: '653e8a9e14512ee30a5c0139'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:        
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      variation:
                        $ref: '#/components/schemas/Variation'
        '400': 
          description: Bad request, INVALID_PARAMS_ID | INVALID_CART_VARIATION_ID
        '404':
          description: Not found, CART_NOT_FOUND | VARIATION_NOT_FOUND | PRODUCT_NOT_FOUND  
        '500':
          description: Internal server error, SERVER_ERROR
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'   
  /carts/{cartId}/quantity:
    patch:
      tags:
        - Carts
      summary: Update product's quantity in carts (user)
      description: Allow user update quantity of product in their carts
      operationId: updateQuantityCarts
      parameters:
        - name: cartId
          type: string
          required: true
          explode: true
          description: Id of cart
          in: path
          example: '654688a5b231010272ee9b80'
          schema:
            type: string
            format: ObjectID
      security:
        - BearerAuth: []
      requestBody:
        description: quantity of the product, if quantity is 0, item will be deleted
        content:
          application/json:
            schema:
              properties:
                quantity:
                  type: number
                  example: 2
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:        
                properties:
                  success:
                    type: boolean
                    example: true
        '400': 
          description: Bad request, INVALID_PARAMS_ID | INVALID_UPDATED_CART_QUANTITY 
        '404':
          description: Not found, CART_NOT_FOUND | VARIATION_NOT_FOUND | PRODUCT_NOT_FOUND  
        '500':
          description: Internal server error, SERVER_ERROR
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'   
  /carts/{cartId}:
    delete:
      tags:
        - Carts
      summary: delete product in carts (user)
      description: Allow user to delete product in their carts
      operationId: deleteCarts
      parameters:
        - name: cartId
          type: string
          required: true
          explode: true
          description: Id of cart
          in: path
          example: '654687d2b7a00bc1ba5f834e'
          schema:
            type: string
            format: ObjectID
      security:
        - BearerAuth: []
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:        
                properties:
                  success:
                    type: boolean
                    example: true
        '400': 
          description: Bad request, INVALID_PARAMS_ID 
        '404':
          description: Not found, CART_NOT_FOUND 
        '500':
          description: Internal server error, SERVER_ERROR
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'   
       
  #order
  #user
  /orders/me:
    get:
      tags:
        - Orders
      summary: Get my orders (user)
      description: Allow user to get list of their orders
      operationId: getMyOrders
      parameters:
        - name: limit
          in: query
          description: The page size for pagination
          required: false
          explode: true
          schema:
            type: number
        - name: page
          in: query
          description: The page number for pagination
          required: false
          explode: true
          schema:
            type: number
        - name: order
          in: query
          description: Sort product ascending or descending, use for sorting (by date)
          required: false
          explode: true
          schema:
            type: string
            enum:
              - asc
              - desc
        - name: search
          in: query
          description: Allows the user to specify a search string for filtering products based on product name, order number or shop name
          required: false
          explode: true
          schema:
            type: string
        - name: status
          in: query
          description: Filter the orders by status
          required: false
          explode: true
          schema:
            type: string
            enum:
              - to-pay
              - to-confirm
              - to-ship
              - to-receive
              - completed
              - canceled
      security:
        - BearerAuth: []
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:        
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      total:
                        type: number
                        example: 1
                      length:
                        type: number
                        example: 1
                      orders:
                        type: array
                        items:
                          $ref: '#/components/schemas/Orders'  
        '500':
          description: Internal server error, SERVER_ERROR
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'    
    post:
      tags:
        - Orders
      summary: Add order (user)
      description: Allow user to make new order
      operationId: addMyOrder
      requestBody:
        description: Information about the orders (required all), can archive from checkout
        content:
          application/json:
            schema:
              properties:
                addressId:
                  type: string
                  format: objectId
                  example: 6538c4e2cc978c2ebaba4efb
                orders:
                  type: array
                  items: 
                    $ref: '#/components/schemas/AddOrders'
      security:
        - BearerAuth: []
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:        
                properties:
                  success:
                    type: boolean
                    example: true
        '500':
          description: Internal server error, SERVER_ERROR
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'    
  /orders/checkout:
    get:
      tags:
        - Orders
      summary: Checkout Orders
      description: Allow user to checkout before make an orders
      operationId: checkoutOrders
      parameters:
        - name: code
          type: string
          required: true
          explode: true
          description: checkout code, use post action to get this code
          in: query
          example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJkYXRhIjpbeyJfaWQiOiI2NTNlOGE5ZTE0NTEyZWUzMGE1YzAxMzciLCJ2YXJpYXRpb25JZCI6IjY1M2U4YTllMTQ1MTJlZTMwYTVjMDEzOCIsInF1YW50aXR5IjoyfSx7Il9pZCI6IjY1NDY4ZTk0MWEyZjllODEzYzkwMDRhYSIsInZhcmlhdGlvbklkIjoiNjU0NjhlOTQxYTJmOWU4MTNjOTAwNGFjIiwicXVhbnRpdHkiOjJ9XSwiaWF0IjoxNjk5NzQwMzY0LCJleHAiOjE3MDAzNDUxNjR9.OP16iaxAasf_FOM8pgKhsCQwQgUlCQvN5jlvi9yeoBY'
        
      security:
        - BearerAuth: []
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:        
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      orders:
                        type: array
                        items:
                          $ref: '#/components/schemas/AddOrders'  
        '400':
          description: Bad request, INVALID_CODE
        '404':
          description: Not found, ADDRESS_NOT_FOUND | USER_NOT_FOUND
        '500':
          description: Internal server error, SERVER_ERROR
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'    
    post:
      tags:
        - Orders
      summary: Get order checkout code
      description: Allow user get order checkout Code, pass to checkout API
      operationId: checkoutOrdersCode
      requestBody:
        description: Need to provide all product want to order with _id, variation._id and quantity
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CodeOrders'          
      security:
        - BearerAuth: []
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:        
                properties:
                  success:
                    type: boolean
                    example: true
                  code:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJkYXRhIjpbeyJfaWQiOiI2NTNlOGE5ZTE0NTEyZWUzMGE1YzAxMzciLCJ2YXJpYXRpb25JZCI6IjY1M2U4YTllMTQ1MTJlZTMwYTVjMDEzOCIsInF1YW50aXR5IjoyfSx7Il9pZCI6IjY1NDY4ZTk0MWEyZjllODEzYzkwMDRhYSIsInZhcmlhdGlvbklkIjoiNjU0NjhlOTQxYTJmOWU4MTNjOTAwNGFjIiwicXVhbnRpdHkiOjJ9XSwiaWF0IjoxNjk5NzQwMzY0LCJleHAiOjE3MDAzNDUxNjR9.OP16iaxAasf_FOM8pgKhsCQwQgUlCQvN5jlvi9yeoBY
        '400':
          description: Bad request, INVALID_CHECKOUT_PRODUCTS
        '500':
          description: Internal server error, SERVER_ERROR
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'    
  /orders/{orderId}/me/address:
    patch:
      tags:
        - Orders
      summary: Update order's address (user)
      description: Allow user update address when order is not comfirmed
      operationId: updateMyOdersAddr
      parameters:
        - name: orderId
          in: path
          type: string
          required: true
          explode: true
          example: '6557a3985b9d4f8135ac00ff'
          schema:
            type: string
            format: objectId
      requestBody:
        description: Address id to update
        content:
          application/json:
            schema:
              properties:
                addressId: 
                  type: string
                  format: objectId
                  example: 6538c4c1cc978c2ebaba4ef5        
      security:
        - BearerAuth: []
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:        
                properties:
                  success:
                    type: boolean
                    example: true
        '400':
          description: Bad request, INVALID_PARAMS_ID
        '403':
          description: Forbidden, ORDER_CANT_BE_CHANGED
        '404':
          description: Not found, USER_NOT_FOUND | ADDRESS_NOT_FOUND | ORDER_NOT_FOUND
        '500':
          description: Internal server error, SERVER_ERROR
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'    
  /orders/{orderId}/me:
    get:
      tags:
        - Orders
      summary: Get my order detail (user)
      description: Allow user to get order detail
      operationId: getMyOder
      parameters:
        - name: orderId
          in: path
          type: string
          required: true
          explode: true
          example: '6557a3985b9d4f8135ac00ff'
          schema:
            type: string
            format: objectId
      security:
        - BearerAuth: []
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:        
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      order:
                        $ref: '#/components/schemas/Orders'
        '400':
          description: Bad request, INVALID_PARAMS_ID
        '404':
          description: Not found, ORDER_NOT_FOUND
        '500':
          description: Internal server error, SERVER_ERROR
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'    
    delete:
      tags:
        - Orders
      summary: Cancel order (user)
      description: Allow user to cancel order when it is not comfirmed
      operationId: cancelMyOders
      parameters:
        - name: orderId
          in: path
          type: string
          required: true
          explode: true
          example: '6557a3985b9d4f8135ac00ff'
          schema:
            type: string
            format: objectId
      security:
        - BearerAuth: []
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:        
                properties:
                  success:
                    type: boolean
                    example: true
        '400':
          description: Bad request, INVALID_PARAMS_ID
        '403':
          description: Forbidden, ORDER_CANT_BE_CHANGED
        '404':
          description: Not found, ORDER_NOT_FOUND
        '500':
          description: Internal server error, SERVER_ERROR
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'    
  #seller
  /orders/shop:
    get:
      tags:
        - Orders
      summary: Get shop orders (seller)
      description: Allow seller to get list of their shop's orders
      operationId: getShopOrders
      parameters:
        - name: limit
          in: query
          description: The page size for pagination
          required: false
          explode: true
          schema:
            type: number
        - name: page
          in: query
          description: The page number for pagination
          required: false
          explode: true
          schema:
            type: number
        - name: order
          in: query
          description: Sort product ascending or descending, use for sorting (by date)
          required: false
          explode: true
          schema:
            type: string
            enum:
              - asc
              - desc
        - name: search
          in: query
          description: Allows the user to specify a search string for filtering products based on product name, order number or shop name
          required: false
          explode: true
          schema:
            type: string
        - name: status
          in: query
          description: Filter the orders by status
          required: false
          explode: true
          schema:
            type: string
            enum:
              - to-pay
              - to-confirm
              - to-ship
              - to-receive
              - completed
              - canceled
      security:
        - BearerAuth: []
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:        
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      total:
                        type: number
                        example: 1
                      length:
                        type: number
                        example: 1
                      orders:
                        type: array
                        items:
                          $ref: '#/components/schemas/Orders'  
        '404':
          description: Not found, SHOP_NOT_FOUND
        '500':
          description: Internal server error, SERVER_ERROR
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'    
  /orders/{orderId}/shop:
    get:
      tags:
        - Orders
      summary: Get shop's order detail (seller)
      description: Allow seller to get order detail of their shop's orders
      operationId: getShopOder
      parameters:
        - name: orderId
          in: path
          type: string
          required: true
          explode: true
          example: '6557a3975b9d4f8135ac00fb'
          schema:
            type: string
            format: objectId
      security:
        - BearerAuth: []
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:        
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      order:
                        $ref: '#/components/schemas/Orders'
        '400':
          description: Bad request, INVALID_PARAMS_ID
        '404':
          description: Not found, ORDER_NOT_FOUND | SHOP_NOT_FOUND
        '500':
          description: Internal server error, SERVER_ERROR
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'    
    delete:
      tags:
        - Orders
      summary: Cancel shop's order (seller)
      description: Allow seller to cancel shop's order
      operationId: cancelShopOder
      parameters:
        - name: orderId
          in: path
          type: string
          required: true
          explode: true
          example: '6557a3975b9d4f8135ac00fb'
          schema:
            type: string
            format: objectId
      security:
        - BearerAuth: []
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:        
                properties:
                  success:
                    type: boolean
                    example: true
        '400':
          description: Bad request, INVALID_PARAMS_ID
        '403':
          description: Forbidden, ORDER_CANT_BE_CHANGED
        '404':
          description: Not found, ORDER_NOT_FOUND | SHOP_NOT_FOUND
        '500':
          description: Internal server error, SERVER_ERROR
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'    
  /orders/{orderId}/confirm:
    patch:
      tags:
        - Orders
      summary: Confirm shop's order (seller)
      description: Allow seller to confirm their shop's order
      operationId: confirmShopOder
      parameters:
        - name: orderId
          in: path
          type: string
          required: true
          explode: true
          example: '6557a3975b9d4f8135ac00fb'
          schema:
            type: string
            format: objectId
      security:
        - BearerAuth: []
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:        
                properties:
                  success:
                    type: boolean
                    example: true
        '400':
          description: Bad request, INVALID_PARAMS_ID
        '403':
          description: Forbidden, ORDER_CANT_BE_CHANGED
        '404':
          description: Not found, ORDER_NOT_FOUND | SHOP_NOT_FOUND
        '500':
          description: Internal server error, SERVER_ERROR
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'    
  #admin
  /orders:
    get:
      tags:
        - Orders
      summary: Get list all orders (admin)
      description: Allow admin to get list of all orders
      operationId: getOrders
      parameters:
        - name: limit
          in: query
          description: The page size for pagination
          required: false
          explode: true
          schema:
            type: number
        - name: page
          in: query
          description: The page number for pagination
          required: false
          explode: true
          schema:
            type: number
        - name: sortBy
          in: query
          description: Sort order by date updated or total price
          required: false
          explode: true
          schema:
            type: string
            enum:
              - date
              - price
        - name: order
          in: query
          description: Sort order ascending or descending, use for sorting
          required: false
          explode: true
          schema:
            type: string
            enum:
              - asc
              - desc
        - name: search
          in: query
          description: Allows the user to specify a search string for filtering products based on product name, order number or shop name
          required: false
          explode: true
          schema:
            type: string
        - name: status
          in: query
          description: Filter the orders by status
          required: false
          explode: true
          schema:
            type: string
            enum:
              - to-pay
              - to-confirm
              - to-ship
              - to-receive
              - completed
              - canceled
        - name: userId
          in: query
          description: Filter the orders by userId
          required: false
          explode: true
          example: 6530fb27ee98ba62f7728d71
          schema:
            type: string
        - name: shopId
          in: query
          description: Filter the orders by shopId
          required: false
          explode: true
          example: 653943fedb39b5fd654738d3
          schema:
            type: string
      security:
        - BearerAuth: []
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:        
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      total:
                        type: number
                        example: 1
                      length:
                        type: number
                        example: 1
                      orders:
                        type: array
                        items:
                          $ref: '#/components/schemas/Orders'  
        '404':
          description: Not found, SHOP_NOT_FOUND
        '500':
          description: Internal server error, SERVER_ERROR
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'    
  /orders/{orderId}:
    get:
      tags:
        - Orders
      summary: Get order detail (admin)
      description: Allow admin to get order detail
      operationId: getOder
      parameters:
        - name: orderId
          in: path
          type: string
          required: true
          explode: true
          example: '6557a3975b9d4f8135ac00fb'
          schema:
            type: string
            format: objectId
      security:
        - BearerAuth: []
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:        
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      order:
                        $ref: '#/components/schemas/Orders'
        '400':
          description: Bad request, INVALID_PARAMS_ID
        '404':
          description: Not found, ORDER_NOT_FOUND 
        '500':
          description: Internal server error, SERVER_ERROR
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'    
    delete:
      tags:
        - Orders
      summary: Cancel order (admin)
      description: Allow admin to cancel order
      operationId: cancelOder
      parameters:
        - name: orderId
          in: path
          type: string
          required: true
          explode: true
          example: '6557a3975b9d4f8135ac00fb'
          schema:
            type: string
            format: objectId
      security:
        - BearerAuth: []
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:        
                properties:
                  success:
                    type: boolean
                    example: true
        '400':
          description: Bad request, INVALID_PARAMS_ID
        '404':
          description: Not found, ORDER_NOT_FOUND
        '500':
          description: Internal server error, SERVER_ERROR
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'    
  /orders/{orderId}/status:
    patch:
      tags:
        - Orders
      summary: Update order's status (admin)
      description: Allow admin to update order's status
      operationId: updateOrderStatus
      parameters:
        - name: orderId
          in: path
          type: string
          required: true
          explode: true
          example: '6557a3975b9d4f8135ac00fb'
          schema:
            type: string
            format: objectId
      requestBody:
        description: Status to update, must be in ['to-pay', 'to-confirm', 'to-ship', 'to-receive', 'completed', 'canceled']
        content:
          application/json:
            schema:
              properties:
                status:
                  type: string
                  example: to-receive
      security:
        - BearerAuth: []
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:        
                properties:
                  success:
                    type: boolean
                    example: true
        '400':
          description: Bad request, INVALID_PARAMS_ID | INVALID_ORDER_STATUS
        '404':
          description: Not found, ORDER_NOT_FOUND 
        '500':
          description: Internal server error, SERVER_ERROR
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'    
  /orders/{orderId}/address:
    patch:
      tags:
        - Orders
      summary: Update order's address (admin)
      description: Allow admin to update order's address
      operationId: updateOrderAddress
      parameters:
        - name: orderId
          in: path
          type: string
          required: true
          explode: true
          example: '6557a3975b9d4f8135ac00fb'
          schema:
            type: string
            format: objectId
      requestBody:
        description: Status to update, must be in ['to-pay', 'to-confirm', 'to-ship', 'to-receive', 'completed', 'canceled']
        content:
          application/json:
            schema:
              properties:
                address:
                  $ref: '#/components/schemas/Addresses'
      security:
        - BearerAuth: []
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:        
                properties:
                  success:
                    type: boolean
                    example: true
        '400':
          description: Bad request, INVALID_PARAMS_ID | INVALID_PHONE | INVALID_NAME | INVALID_ADDRESS
        '404':
          description: Not found, ORDER_NOT_FOUND 
        '500':
          description: Internal server error, SERVER_ERROR
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'    
  

   







